import { Component, signal, OnInit, inject, input, effect } from "@angular/core";
import { CommonModule } from "@angular/common";
import { MatIconModule } from "@angular/material/icon";
import { ActivityDashboardService } from "../../Service/ActivityDashboard";
import { LocalActivityService } from "../../Service/LocalActivityService";
import { SharedStateService } from "../../../Core/Service/SharedService";

interface ActivityItem {
  id: string;
  type: 'quest_completed' | 'milestone' | 'encouragement' | 'group_join' | 'club_join' | 'achievement';
  title: string;
  description: string;
  timestamp: Date;
  icon: string;
  points?: number;
  priority: 'high' | 'medium' | 'low';
}

interface DailyActivity {
  date: string;
  completed: number;
  target: number;
}

interface WeeklyPattern {
  day: string;
  hours: number;
  totalActivities: number;
}

interface SmartInsight {
  type: 'streak' | 'quest' | 'social' | 'achievement';
  message: string;
  priority: 'high' | 'medium' | 'low';
  icon: string;
  actionable?: boolean;
  suggestion?: string;
}

interface ActivityData {
  dailyQuests: DailyActivity[];
  streak: number;
  totalCompleted: number;
  monthlyAchievementRate: number;
  recentActivities: ActivityItem[];
  weeklyPattern: WeeklyPattern[];
  favoriteQuestType: string;
  bestDay: string;
  smartInsights: SmartInsight[];
  personalizedStats: any;
}

@Component({
  selector: 'app-activity-dashboard',
  templateUrl: './ActivityDashboard.html',
  styleUrl: './ActivityDashboard.css',
  imports: [CommonModule, MatIconModule],
  providers: [ActivityDashboardService],
  standalone: true
})
export class ActivityDashboardComponent implements OnInit {
  // ÏÑúÎπÑÏä§ Ï£ºÏûÖ
  private localActivityService = inject(LocalActivityService);

  // Îç∞Ïù¥ÌÑ∞ signals
  activityData = signal<ActivityData | null>(null);
  isLoading = signal<boolean>(true);
  selectedPeriod = signal<'week' | 'month'>('week');

  // ÌÜµÍ≥Ñ signals
  weeklyStats = signal<any[]>([]);
  recentActivities = signal<ActivityItem[]>([]);
  smartInsights = signal<SmartInsight[]>([]);

  constructor(private activityDashboardService: ActivityDashboardService) {}

  ngOnInit(): void {
    this.loadEnhancedActivityData();
  }

  // generateEnhancedDailyQuests Î©îÏÑúÎìú Í∞úÏÑ† - Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©
  private async generateEnhancedDailyQuests(): Promise<DailyActivity[]> {
    try {
      // üîß Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§Îßå Í∞ÄÏ†∏Ïò§Í∏∞
      const [userQuestCur, userQuestPrev] = await Promise.all([
        this.getUserQuestCur(), // ÎãπÏùº ÏßÑÌñâÏ§ëÏù∏ ÌÄòÏä§Ìä∏
        this.getUserQuestPrev() // Ïñ¥Ï†úÍπåÏßÄÏùò ÏôÑÎ£åÎêú ÌÄòÏä§Ìä∏
      ]);
      
      const localActivities = this.localActivityService.activities();

      console.log('üéØ Current Quest Data (Ïò§Îäò):', userQuestCur);
      console.log('üìö Previous Quest Data (Ïñ¥Ï†úÍπåÏßÄ):', userQuestPrev);

      // üîß Ïò§Îäò ÎÇ†ÏßúÏôÄ ÏöîÏùº Í≥ÑÏÇ∞
      const today = new Date();
      const todayDayIndex = today.getDay(); // 0=ÏùºÏöîÏùº, 1=ÏõîÏöîÏùº, ...

      // üìä ÏöîÏùºÎ≥Ñ ÌÄòÏä§Ìä∏ ÌòÑÌô© ÏÉùÏÑ± (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
      const enhancedQuests = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'].map((day, dayIndex) => {
        let completed = 0;
        let target = 0;
        let hasRealData = false;
        let questDetails = [];
        let dataSource = 'none';

        if (dayIndex === todayDayIndex) {
          // üî• Ïò§Îäò Îç∞Ïù¥ÌÑ∞ = userQuestCur ÌôúÏö© (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
          if (userQuestCur?.curQuestTotalList?.length > 0) {
            const todayQuests = userQuestCur.curQuestTotalList;
            completed = todayQuests.filter((q: any) => q.success === true).length;
            target = todayQuests.length;
            hasRealData = true;
            questDetails = todayQuests;
            dataSource = 'userQuestCur';
            
            console.log(`üìÖ Ïò§Îäò(${day}) Ïã§Ï†ú ÌÄòÏä§Ìä∏:`, { completed, target, todayQuests });
          }
          
        } else if (dayIndex < todayDayIndex) {
          // üìö Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞ = userQuestPrev ÌôúÏö© (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
          if (userQuestPrev?.prevQuestTotalList?.length > 0) {
            const pastQuests = this.getQuestsForDay(userQuestPrev, dayIndex, today);
            if (pastQuests.totalCount > 0) {
              completed = pastQuests.completedCount;
              target = pastQuests.totalCount;
              hasRealData = true;
              questDetails = pastQuests.quests;
              dataSource = 'userQuestPrev';
              
              console.log(`üìÖ Í≥ºÍ±∞(${day}) Ïã§Ï†ú ÌÄòÏä§Ìä∏:`, { completed, target, quests: pastQuests.quests });
            }
          }
        }
        // üö´ ÎØ∏Îûò Îç∞Ïù¥ÌÑ∞Îäî ÏÉùÏÑ±ÌïòÏßÄ ÏïäÏùå (ÏòàÏÉÅ Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞)

        // LocalActivity Îç∞Ïù¥ÌÑ∞Î°ú Î≥¥ÏôÑ (Ïã§Ï†ú ÏôÑÎ£åÎêú ÌôúÎèôÎßå)
        const localDayActivities = localActivities.filter(activity => {
          const activityDay = new Date(activity.timestamp).getDay();
          return activityDay === dayIndex && activity.type === 'quest_complete';
        }).length;

        // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå LocalActivityÎ°ú Î≥¥ÏôÑ
        if (hasRealData && localDayActivities > completed) {
          completed = localDayActivities;
          console.log(`üìÖ ${day} LocalActivityÎ°ú Î≥¥ÏôÑ:`, { original: completed, local: localDayActivities });
        }

        return {
          date: day,
          completed: completed,
          target: target,
          currentQuests: questDetails,
          hasRealData: hasRealData, // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ Ïó¨Î∂Ä
          isToday: dayIndex === todayDayIndex,
          isPast: dayIndex < todayDayIndex,
          isFuture: dayIndex > todayDayIndex,
          dataSource: dataSource,
          isEmpty: !hasRealData // Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå ÌëúÏãú
        };
      });

      console.log('üìä Real Data Only Weekly Quest Data:', enhancedQuests);
      return enhancedQuests;

    } catch (error) {
      console.error('‚ùå Error generating real daily quests:', error);
      return this.getEmptyDailyQuests();
    }
  }

  // üîß ÌäπÏ†ï ÏöîÏùºÏùò Í≥ºÍ±∞ ÌÄòÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
  private getQuestsForDay(userQuestPrev: any, targetDayIndex: number, referenceDate: Date): {
    completedCount: number;
    totalCount: number;
    quests: any[];
  } {
    if (!userQuestPrev?.prevQuestTotalList || userQuestPrev.prevQuestTotalList.length === 0) {
      return { completedCount: 0, totalCount: 0, quests: [] };
    }

    // Ïù¥Î≤à Ï£º ÏãúÏûëÏùº Í≥ÑÏÇ∞ (ÏùºÏöîÏùº Í∏∞Ï§Ä)
    const weekStart = new Date(referenceDate);
    weekStart.setDate(weekStart.getDate() - weekStart.getDay());
    
    // ÌÉÄÍ≤ü ÎÇ†Ïßú Í≥ÑÏÇ∞
    const targetDate = new Date(weekStart);
    targetDate.setDate(weekStart.getDate() + targetDayIndex);

    // Ìï¥Îãπ ÎÇ†ÏßúÏùò ÌÄòÏä§Ìä∏ ÌïÑÌÑ∞ÎßÅ (Ïã§Ï†ú ÏôÑÎ£å ÏãúÍ∞ÑÏù¥ ÏûàÎäî Í≤ÉÎßå)
    const dayQuests = userQuestPrev.prevQuestTotalList.filter((quest: any) => {
      if (!quest.completeTime) return false;
      
      const questDate = new Date(quest.completeTime);
      return questDate.toDateString() === targetDate.toDateString();
    });

    const completedCount = dayQuests.filter((q: any) => q.success === true).length;
    const totalCount = dayQuests.length;

    console.log(`üìÖ ${targetDate.toDateString()} Ïã§Ï†ú ÌÄòÏä§Ìä∏:`, {
      ÎÇ†Ïßú: targetDate.toDateString(),
      Ï†ÑÏ≤¥: totalCount,
      ÏôÑÎ£å: completedCount,
      ÌÄòÏä§Ìä∏Î™©Î°ù: dayQuests.map((q: any) => ({ quest: q.quest, success: q.success }))
    });

    return {
      completedCount,
      totalCount,
      quests: dayQuests
    };
  }

  // üîß Îπà Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏóÜÏùÑ Îïå)
  private getEmptyDailyQuests(): DailyActivity[] {
    const todayIndex = new Date().getDay();
    
    return ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'].map((day, index) => ({
      date: day,
      completed: 0,
      target: 0,
      currentQuests: [],
      hasRealData: false,
      isToday: index === todayIndex,
      isPast: index < todayIndex,
      isFuture: index > todayIndex,
      dataSource: 'none',
      isEmpty: true
    }));
  }

  // üîß processEnhancedActivityData Î©îÏÑúÎìú Í∞úÏÑ† - Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå Î∞òÏòÅ
  private processEnhancedActivityData(data: ActivityData): void {
    const localStats = data.personalizedStats?.localStats;

    // üîß Ïã§Ï†ú Ï£ºÍ∞Ñ ÌÄòÏä§Ìä∏ ÌòÑÌô© Í≥ÑÏÇ∞ (Îπà Îç∞Ïù¥ÌÑ∞ Ï†úÏô∏)
    const weeklyQuests = data.dailyQuests || [];
    const daysWithData = weeklyQuests.filter((day: any) => day.hasRealData === true);
    
    const totalWeeklyQuests = daysWithData.reduce((sum, day: any) => sum + (day.target || 0), 0);
    const completedWeeklyQuests = daysWithData.reduce((sum, day: any) => sum + (day.completed || 0), 0);
    const weeklyCompletionRate = totalWeeklyQuests > 0 
      ? Math.round((completedWeeklyQuests / totalWeeklyQuests) * 100) 
      : 0;

    // üîß Ïò§Îäò Ïã§Ï†ú ÏßÑÌñâÏÉÅÌô© (Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏùÑ ÎïåÎßå)
    const todayData = weeklyQuests.find((day: any) => day.isToday === true && day.hasRealData === true);
    const todayProgress = todayData 
      ? `${todayData.completed}/${todayData.target}`
      : null; // Îç∞Ïù¥ÌÑ∞ ÏóÜÏúºÎ©¥ null

    // üîß Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ Ïó¨Î∂Ä Í∏∞Î∞ò ÌÜµÍ≥Ñ
    const dataExistsCount = daysWithData.length;
    const dataCompleteness = Math.round((dataExistsCount / 7) * 100);

    const weeklyStats = [
      {
        label: 'Ïó∞ÏÜç Ï∞∏Ïó¨',
        value: data.streak || 0,
        unit: 'Ïùº',
        icon: 'local_fire_department',
        color: '#3182ce',
        trend: (data.streak || 0) > 7 ? 'up' : 'stable'
      },
      {
        label: 'Ïò§Îäò ÏßÑÌñâ',
        value: todayData?.completed || 0,
        unit: todayData ? `/${todayData.target}` : '',
        icon: 'today',
        color: '#4299e1',
        trend: todayData && todayData.completed >= todayData.target ? 'up' : 'stable',
        hasData: !!todayData // Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ Ïó¨Î∂Ä
      },
      {
        label: 'ÏôÑÎ£åÏú® (Ïã§Ï†ú)',
        value: weeklyCompletionRate,
        unit: '%',
        icon: 'trending_up',
        color: '#2b6cb0',
        trend: weeklyCompletionRate >= 80 ? 'up' : weeklyCompletionRate >= 50 ? 'stable' : 'down',
        hasData: totalWeeklyQuests > 0
      },
      {
        label: 'Îç∞Ïù¥ÌÑ∞ ÏùºÏàò',
        value: dataExistsCount,
        unit: '/7Ïùº',
        icon: 'assessment',
        color: '#68d391',
        trend: dataExistsCount >= 5 ? 'up' : dataExistsCount >= 3 ? 'stable' : 'down',
        hasData: true
      }
    ];

    console.log('üìä Real Data Only Stats:', {
      totalWeeklyQuests,
      completedWeeklyQuests,
      weeklyCompletionRate,
      todayProgress,
      dataExistsCount,
      dataCompleteness
    });

    this.weeklyStats.set(weeklyStats);
    this.recentActivities.set(data.recentActivities || []);
  }

  // üîß loadEnhancedActivityData Î©îÏÑúÎìú - Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå Î°úÎìú
  private async loadEnhancedActivityData(): Promise<void> {
    this.isLoading.set(true);

    try {
      console.log('üîç Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå Î°úÎî© ÏãúÏûë...');

      const [fundamentalData, getBestType, localStats, groupStats, insights] = await Promise.all([
        this.activityDashboardService.getQuestScore().catch(() => [0, 0, 0, 0]),
        this.activityDashboardService.getBestType().catch(() => ['', '']),
        this.localActivityService.getQuestBasedStats().catch(() => ({
          currentQuests: 0,
          completedQuests: 0,
          completionRate: 0,
          favoriteGroup: 'ÏóÜÏùå',
          weeklyProgress: []
        })),
        this.localActivityService.getGroupParticipationStats().catch(() => ({
          totalGroups: 0,
          totalClubs: 0,
          mostActiveGroup: 'ÏóÜÏùå',
          recentlyJoinedGroup: 'ÏóÜÏùå',
          groupDetails: []
        })),
        this.localActivityService.getEnhancedPersonalizedInsights().catch(() => [{
          type: 'quest' as const,
          message: 'üå± ÏÉàÎ°úÏö¥ ÌôúÎèôÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî!',
          priority: 'medium' as const,
          icon: '‚ú®',
          suggestion: 'Ï≤´ Î≤àÏß∏ ÌÄòÏä§Ìä∏Ïóê ÎèÑÏ†ÑÌï¥Î≥¥ÏÑ∏Ïöî'
        }])
      ]);

      // üîß Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÎßåÏúºÎ°ú Íµ¨ÏÑ±Îêú Ï£ºÍ∞Ñ Îç∞Ïù¥ÌÑ∞
      const inputData: ActivityData = {
        dailyQuests: await this.generateEnhancedDailyQuests(), // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå
        streak: Math.max(fundamentalData[0] || 0, this.localActivityService.getCurrentStreak()),
        totalCompleted: (fundamentalData[1] || 0) + localStats.completedQuests,
        monthlyAchievementRate: Math.max(fundamentalData[2] || 0, localStats.completionRate),
        recentActivities: this.generateBasicRecentActivities(), // üîß Ï°¥Ïû¨ÌïòÎäî Î©îÏÑúÎìú ÏÇ¨Ïö©
        weeklyPattern: await this.generateEnhancedWeeklyPattern().catch(() => []),
        favoriteQuestType: localStats.favoriteGroup || getBestType[0] || 'ÏóÜÏùå',
        bestDay: getBestType[1] || 'ÏóÜÏùå',
        smartInsights: insights,
        personalizedStats: {
          localStats,
          groupStats,
          activityStats: this.localActivityService.getActivityStats()
        }
      };

      console.log('üìä Real Data Only Activity Data:', inputData);
      this.activityData.set(inputData);
      this.processEnhancedActivityData(inputData);
      this.smartInsights.set(insights);

    } catch (error) {
      console.error('‚ùå Error loading real data only:', error);
      // üîß Í∞ÑÎã®Ìïú Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ ÏßÅÏ†ë ÏÑ§Ï†ï
      const fallbackData: ActivityData = {
        dailyQuests: this.getEmptyDailyQuests(),
        streak: 0,
        totalCompleted: 0,
        monthlyAchievementRate: 0,
        recentActivities: this.generateBasicRecentActivities(),
        weeklyPattern: [],
        favoriteQuestType: 'ÏóÜÏùå',
        bestDay: 'ÏóÜÏùå',
        smartInsights: [],
        personalizedStats: null
      };
      this.activityData.set(fallbackData);
      this.processEnhancedActivityData(fallbackData);
    } finally {
      this.isLoading.set(false);
    }
  }

  // üîß getUserQuestPrev Î©îÏÑúÎìú
  async getUserQuestPrev(): Promise<any> {
    try {
      const userService = this.activityDashboardService.userService;
      if (userService && userService.getUserQuestPrev) {
        return await userService.getUserQuestPrev();
      }
      return null;
    } catch (error) {
      console.error('‚ùå Error getting userQuestPrev:', error);
      return null;
    }
  }

  // üîß getUserQuestCur Î©îÏÑúÎìú
  async getUserQuestCur(): Promise<any> {
    try {
      const userService = this.activityDashboardService.userService;
      if (userService && userService.getUserQuestCur) {
        return await userService.getUserQuestCur();
      }
      return null;
    } catch (error) {
      console.error('‚ùå Error getting userQuestCur:', error);
      return null;
    }
  }

  // üîß Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ Î©îÏÑúÎìúÎì§
  hasRealQuestData(): boolean {
    const data = this.activityData();
    const weeklyQuests = data?.dailyQuests || [];
    return weeklyQuests.some((day: any) => day.hasRealData === true);
  }

  getRealDataDays(): number {
    const data = this.activityData();
    const weeklyQuests = data?.dailyQuests || [];
    return weeklyQuests.filter((day: any) => day.hasRealData === true).length;
  }

  getWeeklyRealDataSummary(): string {
    const data = this.activityData();
    const weeklyQuests = data?.dailyQuests || [];
    const realDataDays = weeklyQuests.filter((day: any) => day.hasRealData === true);
    
    if (realDataDays.length === 0) {
      return 'Ïù¥Î≤à Ï£º ÌÄòÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.';
    }
    
    const totalCompleted = realDataDays.reduce((sum: number, day: any) => sum + (day.completed || 0), 0);
    const totalTarget = realDataDays.reduce((sum: number, day: any) => sum + (day.target || 0), 0);
    const completionRate = totalTarget > 0 ? Math.round((totalCompleted / totalTarget) * 100) : 0;
    
    return `${realDataDays.length}ÏùºÍ∞Ñ ${totalTarget}Í∞ú ÌÄòÏä§Ìä∏ Ï§ë ${totalCompleted}Í∞ú ÏôÑÎ£å (${completionRate}%)`;
  }

  // üîß ÏöîÏùºÎ≥Ñ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
  getDayRealDataInfo(dayIndex: number): { 
    completed: number; 
    target: number; 
    hasRealData: boolean; 
    dataSource: string;
    isToday: boolean;
    isEmpty: boolean;
  } {
    const data = this.activityData();
    const dailyQuest = data?.dailyQuests?.[dayIndex];
    
    if (!dailyQuest || typeof dailyQuest !== 'object') {
      return { 
        completed: 0, 
        target: 0, 
        hasRealData: false, 
        dataSource: 'none',
        isToday: false,
        isEmpty: true
      };
    }
    
    const questData = dailyQuest as any;
    
    return {
      completed: questData.completed || 0,
      target: questData.target || 0,
      hasRealData: questData.hasRealData || false,
      dataSource: questData.dataSource || 'none',
      isToday: questData.isToday || false,
      isEmpty: questData.isEmpty || false
    };
  }

  // üîß Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§Î≥Ñ ÌëúÏãú (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
  getDataSourceText(dataSource: string): string {
    const textMap: { [key: string]: string } = {
      'userQuestCur': 'ÏßÑÌñâÏ§ë',
      'userQuestPrev': 'ÏôÑÎ£åÎê®',
      'none': 'Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå'
    };
    return textMap[dataSource] || 'Ïïå Ïàò ÏóÜÏùå';
  }

  // üîß Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÎßåÏúºÎ°ú ÏôÑÎ£åÏú® Í≥ÑÏÇ∞
  getRealDataCompletionRate(): number {
    const data = this.activityData();
    const weeklyQuests = data?.dailyQuests || [];
    const realDataDays = weeklyQuests.filter((day: any) => day.hasRealData === true);
    
    if (realDataDays.length === 0) return 0;
    
    const totalTarget = realDataDays.reduce((sum: number, day: any) => sum + (day.target || 0), 0);
    const totalCompleted = realDataDays.reduce((sum: number, day: any) => sum + (day.completed || 0), 0);
    
    return totalTarget > 0 ? Math.round((totalCompleted / totalTarget) * 100) : 0;
  }

  // üîß Ïò§Îäò Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ Ïó¨Î∂Ä
  hasTodayRealData(): boolean {
    const data = this.activityData();
    const todayData = data?.dailyQuests?.find((day: any) => day.isToday === true);
    return (todayData as any)?.hasRealData === true;
  }

  // üîß Í≥ºÍ±∞ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏùºÏàò
  getPastRealDataDays(): number {
    const data = this.activityData();
    const weeklyQuests = data?.dailyQuests || [];
    return weeklyQuests.filter((day: any) => day.isPast === true && day.hasRealData === true).length;
  }

  private async generateEnhancedWeeklyPattern(): Promise<WeeklyPattern[]> {
    const basePattern = await this.activityDashboardService.getWeeklyPattern();
    const activityStats = this.localActivityService.getActivityStats();
    
    // LocalActivity Îç∞Ïù¥ÌÑ∞Î°ú Ìå®ÌÑ¥ Î≥¥Í∞ï
    return basePattern.map((pattern, index) => ({
      ...pattern,
      totalActivities: Math.max(pattern.totalActivities, this.getLocalActivitiesForDay(index))
    }));
  }

  private getLocalActivitiesForDay(dayIndex: number): number {
    const activities = this.localActivityService.activities();
    return activities.filter(activity => {
      const activityDay = new Date(activity.timestamp).getDay();
      return activityDay === dayIndex;
    }).length;
  }

  private mapActivityType(localType: string): ActivityItem['type'] {
    const typeMap: { [key: string]: ActivityItem['type'] } = {
      'quest_complete': 'quest_completed',
      'group_join': 'group_join',
      'club_join': 'club_join',
      'quest_start': 'milestone',
      'page_visit': 'encouragement'
    };
    return typeMap[localType] || 'encouragement';
  }

  private generateEngagingTitle(activity: any): string {
    const titleTemplates: { [key: string]: string } = {
      'quest_complete': `üéØ ${activity.context?.questName || 'ÌÄòÏä§Ìä∏'} ÏôÑÎ£å!`,
      'group_join': `ü§ù ${activity.context?.groupName || 'ÏÉà Í∑∏Î£π'}Ïóê Ìï©Î•ò`,
      'club_join': `üì¢ ${activity.context?.clubName || 'Ï±ÑÎÑê'} Ï∞∏Ïó¨`,
      'quest_start': `üöÄ ÏÉàÎ°úÏö¥ ÎèÑÏ†Ñ ÏãúÏûë`,
      'page_visit': `üëÄ ÏÉàÎ°úÏö¥ ÌÉêÌóò`
    };
    return titleTemplates[activity.type] || activity.title;
  }

  private generatePersonalizedDescription(activity: any): string {
    const descriptions: { [key: string]: string } = {
      'quest_complete': `${activity.context?.groupName || 'Í∑∏Î£π'}ÏóêÏÑú ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÌñàÏäµÎãàÎã§! üåü`,
      'group_join': `ÏÉàÎ°úÏö¥ Ïª§ÎÆ§ÎãàÌã∞ÏôÄÏùò ÎßåÎÇ®Ïù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§ ‚ú®`,
      'club_join': `${activity.context?.groupName || 'Í∑∏Î£π'}ÏóêÏÑú ÌôúÎ∞úÌïú ÏÜåÌÜµÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî üí¨`,
      'quest_start': `ÏÉàÎ°úÏö¥ Î™©Ìëú Îã¨ÏÑ±ÏùÑ ÏúÑÌïú Ï≤´ Í±∏ÏùåÏùÑ ÎÇ¥ÎîõÏóàÏäµÎãàÎã§ üèÉ‚Äç‚ôÄÔ∏è`,
      'page_visit': `ÌÉêÌóò Ï†ïÏã†ÏúºÎ°ú ÏÉàÎ°úÏö¥ ÏòÅÏó≠ÏùÑ Î∞úÍ≤¨ÌñàÏäµÎãàÎã§ üó∫Ô∏è`
    };
    return descriptions[activity.type] || activity.description;
  }

  private getActivityIcon(type: string, context?: any): string {
    const iconMap: { [key: string]: string } = {
      'quest_complete': 'üèÜ',
      'group_join': 'ü§ù',
      'club_join': 'üì¢',
      'quest_start': 'üöÄ',
      'page_visit': 'üëÄ',
      'message_send': 'üí¨',
      'search_action': 'üîç'
    };
    return iconMap[type] || '‚ú®';
  }

  private calculatePriority(activity: any): 'high' | 'medium' | 'low' {
    if (activity.type === 'quest_complete' && activity.points >= 15) return 'high';
    if (activity.type === 'group_join' || activity.type === 'club_join') return 'high';
    if (activity.points >= 10) return 'medium';
    if (activity.type === 'page_visit' && activity.points <= 2) return 'low';
    return 'medium';
  }

  private generateBasicRecentActivities(): ActivityItem[] {
    return [
      {
        id: '1',
        type: 'quest_completed',
        title: 'üåü Ï≤´ Î≤àÏß∏ ÌÄòÏä§Ìä∏ ÏôÑÎ£å Ï§ÄÎπÑ',
        description: 'ÏÉàÎ°úÏö¥ ÎèÑÏ†ÑÏùÑ ÏãúÏûëÌï† Ï§ÄÎπÑÍ∞Ä ÎêòÏóàÏäµÎãàÎã§!',
        timestamp: new Date(Date.now() - 1000 * 60 * 30),
        icon: 'üéØ',
        priority: 'medium'
      }
    ];
  }

  private async generateDailyQuests(): Promise<DailyActivity[]> {
    return await this.activityDashboardService.pastDailyComplete();
  }

  private async generateWeeklyPattern(): Promise<WeeklyPattern[]> {
    return await this.activityDashboardService.getWeeklyPattern();
  }

  // UI Î©îÏÑúÎìúÎì§
  setPeriod(period: 'week' | 'month'): void {
    this.selectedPeriod.set(period);
  }

  getActivityTypeColor(type: string): string {
    const colorMap: { [key: string]: string } = {
      'quest_completed': '#2b6cb0',
      'milestone': '#3182ce', 
      'encouragement': '#4299e1',
      'group_join': '#68d391',
      'club_join': '#4fd1c7',
      'achievement': '#f6ad55'
    };
    return colorMap[type] || '#a0aec0';
  }

  getActivityTypeBadge(type: string): string {
    const badgeMap: { [key: string]: string } = {
      'quest_completed': 'ÏôÑÎ£å',
      'milestone': 'Îã¨ÏÑ±',
      'encouragement': 'ÏùëÏõê',
      'group_join': 'Í∞ÄÏûÖ',
      'club_join': 'Ï∞∏Ïó¨',
      'achievement': 'ÏÑ±Ï∑®'
    };
    return badgeMap[type] || '';
  }

  getTimeAgo(timestamp: Date): string {
    const now = new Date();
    const diff = now.getTime() - timestamp.getTime();
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));

    if (days > 0) return `${days}Ïùº Ï†Ñ`;
    if (hours > 0) return `${hours}ÏãúÍ∞Ñ Ï†Ñ`;
    if (minutes > 0) return `${minutes}Î∂Ñ Ï†Ñ`;
    return 'Î∞©Í∏à Ï†Ñ';
  }

  // ÏôÑÎ£åÏú® Í≥ÑÏÇ∞ Í∞úÏÑ† (null Ï≤¥ÌÅ¨ Ï∂îÍ∞Ä)
  getCompletionRate(): number {
    const data = this.activityData();
    if (!data || !data.dailyQuests || data.dailyQuests.length === 0) return 0;
    
    const totalTarget = data.dailyQuests.reduce((sum, day) => sum + (day.target || 0), 0);
    const totalCompleted = data.dailyQuests.reduce((sum, day) => sum + (day.completed || 0), 0);
    
    return totalTarget > 0 ? Math.round((totalCompleted / totalTarget) * 100) : 0;
  }

  getBestPerformanceDay(): string {
    const data = this.activityData();
    if (!data) return '';
    
    const bestDay = data.weeklyPattern.reduce((best, current) => 
      current.totalActivities > best.totalActivities ? current : best
    );
    
    return bestDay.day;
  }

  getInsightIcon(insight: SmartInsight): string {
    return insight.icon;
  }

  getInsightColor(insight: SmartInsight): string {
    const colorMap: { [key: string]: string } = {
      'high': '#3182ce',
      'medium': '#4299e1', 
      'low': '#a0aec0'
    };
    return colorMap[insight.priority] || '#a0aec0';
  }

  async refreshData(): Promise<void> {
    await this.loadEnhancedActivityData();
  }

  // ÏÉàÎ°úÏö¥ Ïù∏ÏÇ¨Ïù¥Ìä∏ Í¥ÄÎ†® Î©îÏÑúÎìú
  hasHighPriorityInsights(): boolean {
    return this.smartInsights().some(insight => insight.priority === 'high');
  }

  getTopInsight(): SmartInsight | null {
    const insights = this.smartInsights();
    return insights.length > 0 ? insights[0] : null;
  }

  // HTML ÌÖúÌîåÎ¶øÏóêÏÑú ÏÇ¨Ïö©Ìï† Ìó¨Ìçº Î©îÏÑúÎìú
  getPatternWidth(totalActivities: number): number {
    return Math.min((totalActivities / 8) * 100, 100);
  }

  // ÏïàÏ†ÑÌïú ÌçºÏÑºÌã∞ÏßÄ Í≥ÑÏÇ∞ (0ÏúºÎ°ú ÎÇòÎàÑÍ∏∞ Î∞©ÏßÄ Î∞è Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Í∞í Ï≤òÎ¶¨)
  getSafePercentage(completed: number, target: number): number {
    // null, undefined, ÎòêÎäî 0Ïù∏ Í∞íÎì§ÏùÑ ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
    const safeCompleted = completed || 0;
    const safeTarget = target || 0;
    
    if (safeTarget === 0) return 0;
    
    const percentage = (safeCompleted / safeTarget) * 100;
    
    // 100%Î•º Ï¥àÍ≥ºÌïòÏßÄ ÏïäÎèÑÎ°ù Ï†úÌïú
    return Math.min(Math.max(percentage, 0), 100);
  }

  // ÌôúÎèô Ìå®ÌÑ¥ Î∞î ÎÑàÎπÑ Í≥ÑÏÇ∞ (ÏµúÎåÄÍ∞í Í∏∞Ï§ÄÏúºÎ°ú Ï†ïÍ∑úÌôî)
  getPatternBarWidth(dayActivity: number, weeklyPattern: WeeklyPattern[]): number {
    if (!weeklyPattern || weeklyPattern.length === 0) return 0;
    
    const maxActivity = Math.max(...weeklyPattern.map(day => day.totalActivities));
    if (maxActivity === 0) return 0;
    
    return Math.round((dayActivity / maxActivity) * 100);
  }

  // ÌôúÎèô Í∞ïÎèÑÏóê Îî∞Î•∏ ÏÉâÏÉÅ Í≤∞Ï†ï
  getPatternBarColor(dayActivity: number, weeklyPattern: WeeklyPattern[]): string {
    if (!weeklyPattern || weeklyPattern.length === 0) return '#e2e8f0';
    
    const maxActivity = Math.max(...weeklyPattern.map(day => day.totalActivities));
    const percentage = maxActivity > 0 ? (dayActivity / maxActivity) * 100 : 0;
    
    if (percentage >= 80) return '#3182ce'; // Îß§Ïö∞ ÌôúÎ∞ú
    if (percentage >= 60) return '#4299e1'; // ÌôúÎ∞ú
    if (percentage >= 40) return '#63b3ed'; // Î≥¥ÌÜµ
    if (percentage >= 20) return '#90cdf4'; // ÎÇÆÏùå
    if (percentage > 0) return '#bee3f8';   // Îß§Ïö∞ ÎÇÆÏùå
    return '#e2e8f0'; // ÌôúÎèô ÏóÜÏùå
  }

  // ÌôúÎèô Í∞ïÎèÑ Î†àÎ≤® ÌÖçÏä§Ìä∏
  getActivityLevel(dayActivity: number, weeklyPattern: WeeklyPattern[]): string {
    if (!weeklyPattern || weeklyPattern.length === 0) return '';
    
    const maxActivity = Math.max(...weeklyPattern.map(day => day.totalActivities));
    const percentage = maxActivity > 0 ? (dayActivity / maxActivity) * 100 : 0;
    
    if (percentage >= 80) return 'üî• Îß§Ïö∞ ÌôúÎ∞ú';
    if (percentage >= 60) return '‚≠ê ÌôúÎ∞ú';
    if (percentage >= 40) return 'üëç Î≥¥ÌÜµ';
    if (percentage >= 20) return 'üìà ÏãúÏûë';
    if (percentage > 0) return 'üå± ÌôúÎèô';
    return 'üí§ Ìú¥Ïãù';
  }

  // Ï£ºÍ∞Ñ Ìå®ÌÑ¥ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞ Î©îÏÑúÎìúÎì§
  getWeeklyTotal(weeklyPattern: WeeklyPattern[]): number {
    return weeklyPattern.reduce((sum, day) => sum + day.totalActivities, 0);
  }

  getWeeklyAverage(weeklyPattern: WeeklyPattern[]): string {
    const total = this.getWeeklyTotal(weeklyPattern);
    const average = total / weeklyPattern.length;
    return average.toFixed(1);
  }

  getMostActiveDay(weeklyPattern: WeeklyPattern[]): string {
    if (!weeklyPattern || weeklyPattern.length === 0) return '-';
    const mostActive = weeklyPattern.reduce((max, day) => 
      day.totalActivities > max.totalActivities ? day : max
    );
    return mostActive.day;
  }

  getActiveDays(weeklyPattern: WeeklyPattern[]): number {
    return weeklyPattern.filter(day => day.totalActivities > 0).length;
  }
}