import { Component, signal, OnInit } from "@angular/core";
import { CommonModule } from "@angular/common";
import { MatIconModule } from "@angular/material/icon";
import { Router } from "@angular/router";
import { SharedStateService } from "../../../Core/Service/SharedService";
import { GroupService } from "../../../Core/Service/GroupService";

interface GroupInfo {
  name: string;
  description: string;
  emoji: string;
  memberCount: number;
  activeToday: number;
  achievementRate: number;
  rating: number;
  tags: string[];
}

interface ChannelInfo {
  id: string;
  name: string;
  icon: string;
  description: string;
  members: number;
  activity: string;
}

@Component({
  selector: 'app-group-join',
  templateUrl: './GroupJoin.html',
  styleUrl: './GroupJoin.css',
  imports: [CommonModule, MatIconModule],
  standalone: true
})
export class GroupJoinComponent implements OnInit {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  currentStep = signal<number>(1);
  selectedGroup = signal<GroupInfo | null>(null);
  selectedChannels = signal<Set<string>>(new Set());
  isLoading = signal<boolean>(false);

  // Îç∞Ïù¥ÌÑ∞
  availableGroups = signal<GroupInfo[]>([]);
  availableChannels = signal<ChannelInfo[]>([]);

  constructor(
    private router: Router,
    private shared: SharedStateService,
    private groupService: GroupService
  ) {}

  ngOnInit(): void {
    this.loadAvailableGroups();
  }

  private loadAvailableGroups(): void {
    const groups = this.groupService.getGroupList();
    const viewGroups: GroupInfo[] = [
      {
        name: '0Ïõê Ï±åÎ¶∞ÏßÄ',
        description: 'Îèà Ïì∞ÏßÄ ÏïäÍ≥†ÎèÑ Í±¥Í∞ïÌïòÍ≥† ÏùòÎØ∏ÏûàÎäî ÏÉùÌôúÏùÑ ÎßåÎì§Ïñ¥Í∞ÄÎäî Ï±åÎ¶∞ÏßÄ. Îß§Ïùº ÏÉàÎ°úÏö¥ Î¨¥Î£å ÌôúÎèôÏúºÎ°ú Í∞ìÏÉùÏùÑ ÏÇ¥ÏïÑÎ≥¥ÏÑ∏Ïöî!',
        emoji: 'üí™',
        memberCount: 124,
        activeToday: 84,
        achievementRate: 78,
        rating: 4.8,
        tags: ['Ï†àÏïΩ', 'Í±¥Í∞ï', 'ÏÉùÌôúÏäµÍ¥Ä', 'Î¨¥Î£åÌôúÎèô']
      },
      {
        name: 'JÏ≤òÎüº ÏÇ¥Í∏∞',
        description: 'Í≥ÑÌöçÏ†ÅÏù¥Í≥† Ï≤¥Í≥ÑÏ†ÅÏù∏ ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùºÏùÑ Ï∂îÍµ¨ÌïòÎäî ÏÇ¨ÎûåÎì§Ïùò Î™®ÏûÑ. MBTI J ÏÑ±Ìñ•Ïù¥ Í∞ïÌïú Î∂ÑÎì§Í≥º Ìï®Íªò Ìö®Ïú®Ï†ÅÏù∏ ÏÇ∂ÏùÑ ÎßåÎì§Ïñ¥Ïöî.',
        emoji: 'üåü',
        memberCount: 67,
        activeToday: 43,
        achievementRate: 85,
        rating: 4.9,
        tags: ['Í≥ÑÌöç', 'Ï≤¥Í≥Ñ', 'MBTI', 'ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùº']
      },
      {
        name: 'ÏûëÏã¨ÏÇºÏùº ÌÉàÏ∂ú',
        description: 'ÏûëÏã¨ÏÇºÏùºÏùÑ Í∑πÎ≥µÌïòÍ≥† Íæ∏Ï§ÄÌïú ÏûêÍ∏∞Í≥ÑÎ∞úÏùÑ Ïã§ÌòÑÌïòÎäî Í∑∏Î£π. ÏäµÍ¥Ä ÌòïÏÑ±Í≥º Î™©Ìëú Îã¨ÏÑ±ÏùÑ Ìï®Íªò ÏùëÏõêÌï¥Ïöî.',
        emoji: 'üìö',
        memberCount: 89,
        activeToday: 56,
        achievementRate: 72,
        rating: 4.7,
        tags: ['ÏäµÍ¥ÄÌòïÏÑ±', 'ÏûêÍ∏∞Í≥ÑÎ∞ú', 'ÎèôÍ∏∞Î∂ÄÏó¨', 'Íæ∏Ï§ÄÌï®']
      }
    ];

    this.availableGroups.set(viewGroups);
  }

  selectGroup(group: GroupInfo): void {
    this.selectedGroup.set(group);
    this.loadChannelsForGroup(group.name);
  }

  private loadChannelsForGroup(groupId: string): void {
    // Í∑∏Î£πÎ≥Ñ Ï±ÑÎÑê Îç∞Ïù¥ÌÑ∞
    const channelData: { [key: string]: ChannelInfo[] } = {
      challenge: [
        {
          id: 'general',
          name: 'ÏùºÎ∞ò',
          icon: 'üí¨',
          description: '0ÏõêÏúºÎ°ú Í∞ìÏÉùÏùÑ ÏÇ¥ÏïÑÍ∞ÄÎäî Î™®Îì† Ïù¥ÏïºÍ∏∞Î•º ÎÇòÎà†Ïöî',
          members: 124,
          activity: 'Îß§Ïö∞ ÌôúÎ∞ú'
        },
        {
          id: 'quest',
          name: 'ÏùºÏùº ÌÄòÏä§Ìä∏',
          icon: 'üéØ',
          description: 'Îß§Ïùº ÏÉàÎ°úÏö¥ ÎèÑÏ†ÑÍ≥º ÌÄòÏä§Ìä∏Î•º Ìï®ÍªòÌï¥Ïöî',
          members: 98,
          activity: 'ÌôúÎ∞ú'
        },
        {
          id: 'tips',
          name: 'ÌåÅ Í≥µÏú†',
          icon: 'üí°',
          description: 'Îèà Ïïà Ïì∞Í≥† ÏÇ¥Í∏∞ Ï¢ãÏùÄ ÌåÅÎì§ÏùÑ Í≥µÏú†Ìï¥Ïöî',
          members: 87,
          activity: 'Î≥¥ÌÜµ'
        }
      ],
      lifestyle: [
        {
          id: 'entj',
          name: 'ENTJ Î™®Ïó¨Îùº!',
          icon: 'üëë',
          description: 'ENTJÎì§Ïùò Í≥ÑÌöçÏ†ÅÏù¥Í≥† Ìö®Ïú®Ï†ÅÏù∏ ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùº Í≥µÏú†',
          members: 23,
          activity: 'ÌôúÎ∞ú'
        },
        {
          id: 'estp',
          name: 'ESTP Î™®Ïó¨Îùº!',
          icon: '‚ö°',
          description: 'ESTPÎì§Ïùò ÌôúÎèôÏ†ÅÏù¥Í≥† Ïó≠ÎèôÏ†ÅÏù∏ ÏÇ∂Ïùò Ïù¥ÏïºÍ∏∞',
          members: 19,
          activity: 'Î≥¥ÌÜµ'
        },
        {
          id: 'samyang',
          name: 'ÏÇºÏñë Î™®Ïó¨Îùº!',
          icon: 'üè¢',
          description: 'ÏÇºÏñëÏù∏Îì§Ïùò ÌäπÎ≥ÑÌïú ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùºÍ≥º Í≤ΩÌóò Í≥µÏú†',
          members: 25,
          activity: 'ÌôúÎ∞ú'
        }
      ],
      resolution: [
        {
          id: 'workout',
          name: 'Ïö¥ÎèôÌïòÍ∏∞',
          icon: 'üí™',
          description: 'Ïö¥Îèô ÏäµÍ¥ÄÏùÑ ÎßåÎì§Í≥† Íæ∏Ï§ÄÌûà Ïù¥Ïñ¥Í∞ÄÎäî Í≥µÍ∞Ñ',
          members: 54,
          activity: 'Îß§Ïö∞ ÌôúÎ∞ú'
        },
        {
          id: 'study',
          name: 'Í≥µÎ∂ÄÌïòÍ∏∞',
          icon: 'üìñ',
          description: 'Í≥µÎ∂Ä Î£®Ìã¥ÏùÑ Ï†ïÏ∞©ÏãúÌÇ§Í≥† ÌïôÏäµ ÎèôÍ∏∞Î•º Ïú†ÏßÄÌïòÎäî Í≥≥',
          members: 43,
          activity: 'ÌôúÎ∞ú'
        }
      ]
    };

    this.availableChannels.set(channelData[groupId] || []);
  }

  goToChannelSelection(): void {
    if (!this.selectedGroup()) return;
    this.updateStep(2);
  }

  goBackToGroups(): void {
    this.updateStep(1);
    this.selectedChannels.set(new Set());
  }

  toggleChannel(channelId: string): void {
    const current = this.selectedChannels();
    const updated = new Set(current);
    
    if (updated.has(channelId)) {
      updated.delete(channelId);
    } else {
      updated.add(channelId);
    }
    
    this.selectedChannels.set(updated);
  }

  isChannelSelected(channelId: string): boolean {
    return this.selectedChannels().has(channelId);
  }

  hasSelectedChannels(): boolean {
    return this.selectedChannels().size > 0;
  }

  async joinSelectedGroup(): Promise<void> {
    const group = this.selectedGroup();
    const channels = this.selectedChannels();
    
    if (!group || channels.size === 0) return;

    this.isLoading.set(true);

    try {
      // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî API Ìò∏Ï∂úÎ°ú Í∑∏Î£π Ï∞∏Ïó¨ Ï≤òÎ¶¨
      // await this.groupService.joinGroup(group.id, Array.from(channels));
      
      // ÏûÑÏãú: localStorageÏóê Ï∞∏Ïó¨ Ï†ïÎ≥¥ Ï†ÄÏû•
      const joinedGroups = JSON.parse(localStorage.getItem('joinedGroups') || '[]');
      const groupData = {
        groupName: group.name,
        channels: Array.from(channels),
        joinedAt: new Date().toISOString()
      };
      
      if (!joinedGroups.find((g: any) => g.groupName === group.name)) {
        joinedGroups.push(groupData);
        localStorage.setItem('joinedGroups', JSON.stringify(joinedGroups));
      }

      // SharedServiceÏóê ÏÑ†ÌÉùÎêú Í∑∏Î£πÍ≥º Ï≤´ Î≤àÏß∏ Ï±ÑÎÑê ÏÑ§Ï†ï
      this.shared.setSelectedGroup(group.name);
      const firstChannel = Array.from(channels)[0];
      this.shared.setSelectedChannel(firstChannel, group.name);

      // ÏôÑÎ£å Îã®Í≥ÑÎ°ú Ïù¥Îèô
      this.updateStep(3);

      console.log('Í∑∏Î£π Ï∞∏Ïó¨ ÏôÑÎ£å:', {
        group: group.name,
        channels: Array.from(channels)
      });

    } catch (error) {
      console.error('Í∑∏Î£π Ï∞∏Ïó¨ Ïã§Ìå®:', error);
      alert('Í∑∏Î£π Ï∞∏Ïó¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    } finally {
      this.isLoading.set(false);
    }
  }

  goToDashboard(): void {
    // Í∑∏Î£π ÎåÄÏãúÎ≥¥ÎìúÎ°ú Ïù¥Îèô
    this.router.navigate(['/group/dashboard']);
  }

  private updateStep(step: number): void {
    this.currentStep.set(step);
  }

  // Ìó¨Ìçº Î©îÏÑúÎìúÎì§
  isStep(step: number): boolean {
    return this.currentStep() === step;
  }

  isStepCompleted(step: number): boolean {
    return this.currentStep() > step;
  }

  isStepActive(step: number): boolean {
    return this.currentStep() === step;
  }

  getSelectedChannelNames(): string[] {
    const channels = this.availableChannels();
    const selected = this.selectedChannels();
    
    return channels
      .filter(channel => selected.has(channel.id))
      .map(channel => channel.name);
  }
}