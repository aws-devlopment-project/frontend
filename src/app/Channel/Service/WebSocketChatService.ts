// WebSocketChatService.ts - Ï±ÑÎÑê Ï†ïÎ≥¥ Í¥ÄÎ¶¨ Í∞úÏÑ†
import { Injectable, signal } from '@angular/core';
import { Subject } from 'rxjs';
import { Client, IFrame, IMessage } from '@stomp/stompjs';
import SockJS from 'sockjs-client';
import { ChatMessageDto } from '../Models/chatMessage';

@Injectable({
  providedIn: 'root'
})
export class StompWebSocketService {
  private stompClient: Client | null = null;
  private currentClubId: number = -1;
  private currentUserEmail: string = '';
  private currentUsername: string = '';
  private currentChannelName: string = '';
  private currentGroupId: string = '';

  // Signals
  connectionStatus = signal<'connecting' | 'connected' | 'disconnected' | 'reconnecting'>('disconnected');
  
  // Subjects
  private messageSubject = new Subject<ChatMessageDto>();
  private errorSubject = new Subject<string>();

  // Observables
  messages$ = this.messageSubject.asObservable();
  errors$ = this.errorSubject.asObservable();

  constructor() {}
  
  // STOMP Ïó∞Í≤∞ - Í∞úÏÑ†Îêú Î°úÍπÖ
  connect(userEmail: string, username: string, serverUrl: string = 'http://localhost:9001'): void {
    console.log('üîå STOMP Ïó∞Í≤∞ ÏãúÏûë:', { userEmail, username, serverUrl });
    
    if (this.stompClient?.connected) {
      console.log('‚úÖ Ïù¥ÎØ∏ Ïó∞Í≤∞Îê®');
      return;
    }

    this.currentUserEmail = userEmail;
    this.currentUsername = username;
    this.connectionStatus.set('connecting');

    this.stompClient = new Client({
      webSocketFactory: () => new SockJS(`${serverUrl}/ws`),
      
      onConnect: (frame: IFrame) => {
        console.log('‚úÖ STOMP Ïó∞Í≤∞ ÏÑ±Í≥µ:', frame);
        this.connectionStatus.set('connected');
        
        // ÌòÑÏû¨ ÌÅ¥ÎüΩÏù¥ ÏûàÎã§Î©¥ ÏûêÎèô Íµ¨ÎèÖ
        if (this.currentClubId !== -1) {
          console.log('üîÑ Í∏∞Ï°¥ ÌÅ¥ÎüΩ ÏûêÎèô Íµ¨ÎèÖ:', this.currentClubId);
          this.subscribeToClub(this.currentClubId);
        }
      },

      onStompError: (frame: IFrame) => {
        console.error('‚ùå STOMP Ïò§Î•ò:', frame);
        this.connectionStatus.set('disconnected');
        this.errorSubject.next('STOMP Ïó∞Í≤∞ Ïò§Î•ò');
      },

      onWebSocketClose: (event: CloseEvent) => {
        console.log('üîå WebSocket Ïó∞Í≤∞ Ìï¥Ï†ú:', event.code, event.reason);
        this.connectionStatus.set('disconnected');
      },

      // ÎîîÎ≤ÑÍ∑∏ Î°úÍπÖ Ï∂îÍ∞Ä
      debug: (str: string) => {
        console.log('STOMP Debug:', str);
      }
    });

    this.stompClient.activate();
  }

// Ï±ÑÌåÖÎ∞© ÏûÖÏû• - Í∞úÏÑ†Îêú Ï†ïÎ≥¥ Í¥ÄÎ¶¨ Î∞è ÎîîÎ≤ÑÍπÖ
joinRoom(clubId: number, userEmail: string, username: string, channelName?: string, groupId?: string): void {
    console.log('üö™ ===== Ï±ÑÌåÖÎ∞© ÏûÖÏû• ÏöîÏ≤≠ =====');
    console.log('üìã ÏûÖÎ†• Îß§Í∞úÎ≥ÄÏàò:', { 
        clubId, 
        userEmail, 
        username,
        channelName,
        groupId,
        type: typeof clubId
    });
    
    // clubId Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if (!clubId || clubId === -1 || typeof clubId !== 'number') {
        console.error('‚ùå Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ clubId:', clubId);
        this.errorSubject.next('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ï±ÑÎÑê IDÏûÖÎãàÎã§.');
        return;
    }
    
    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if (!userEmail || !username) {
        console.error('‚ùå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÎàÑÎùΩ:', { userEmail, username });
        this.errorSubject.next('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
        return;
    }
    
    console.log('‚úÖ ÏûÖÎ†• Í≤ÄÏ¶ù ÌÜµÍ≥º');
    
    // Í∏∞Ï°¥ Ï±ÑÌåÖÎ∞©ÏóêÏÑú ÎÇòÍ∞ÄÍ∏∞ (Îã§Î•∏ Ï±ÑÌåÖÎ∞©ÏúºÎ°ú Ïù¥ÎèôÌïòÎäî Í≤ΩÏö∞)
    if (this.currentClubId !== -1 && this.currentClubId !== clubId) {
        console.log('üö™ Í∏∞Ï°¥ Ï±ÑÌåÖÎ∞© Ìá¥Ïû•:', {
            previousClubId: this.currentClubId,
            newClubId: clubId
        });
        this.leaveRoom();
    }
    
    // ÏÉàÎ°úÏö¥ Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ ÏÑ§Ï†ï
    this.currentClubId = clubId;
    this.currentUserEmail = userEmail;
    this.currentUsername = username;
    this.currentChannelName = channelName || '';
    this.currentGroupId = groupId || '';
    
    console.log('üìù Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:', {
        clubId: this.currentClubId,
        channelName: this.currentChannelName,
        groupId: this.currentGroupId,
        userEmail: this.currentUserEmail,
        username: this.currentUsername
    });
    
    // Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏ Î∞è Ï≤òÎ¶¨
    const isConnected = this.stompClient?.connected;
    console.log('üîå STOMP Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏:', {
        connected: isConnected,
        stompClient: !!this.stompClient,
        connectionStatus: this.connectionStatus()
    });
    
    if (isConnected) {
        console.log('‚úÖ Ïó∞Í≤∞Îêú ÏÉÅÌÉú - Íµ¨ÎèÖ Î∞è ÏûÖÏû• Î©îÏãúÏßÄ Ï†ÑÏÜ°');
        this.subscribeToClub(clubId);
        this.sendJoinMessage(clubId, userEmail, username);
    } else {
        console.log('‚ö†Ô∏è Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉú - Ïó∞Í≤∞ ÌõÑ ÏûêÎèô Ï≤òÎ¶¨Îê† ÏòàÏ†ï');
    }
    
    console.log('üö™ ===== Ï±ÑÌåÖÎ∞© ÏûÖÏû• ÏöîÏ≤≠ ÏôÑÎ£å =====');
}

// ÌÅ¥ÎüΩ Íµ¨ÎèÖ - Í∞úÏÑ†Îêú ÎîîÎ≤ÑÍπÖ
private subscribeToClub(clubId: number): void {
    console.log('üì° ===== ÌÅ¥ÎüΩ Íµ¨ÎèÖ ÏãúÏûë =====');
    console.log('üìã Íµ¨ÎèÖ Ï†ïÎ≥¥:', {
        clubId,
        type: typeof clubId,
        isValidNumber: !isNaN(clubId) && clubId > 0
    });
    
    if (!this.stompClient?.connected) {
        console.warn('‚ö†Ô∏è STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå - Íµ¨ÎèÖ Î∂àÍ∞Ä');
        return;
    }

    const topic = `/topic/chatroom/${clubId}`;
    console.log('üì° Íµ¨ÎèÖ ÌÜ†ÌîΩ:', topic);

    try {
        this.stompClient.subscribe(topic, (message: IMessage) => {
            console.log('üì® ===== Î©îÏãúÏßÄ ÏàòÏã† =====');
            console.log('üìã Î©îÏãúÏßÄ Ï†ïÎ≥¥:', {
                topic: topic,
                clubId: clubId,
                bodyLength: message.body?.length || 0,
                headers: message.headers
            });
            
            // Î©îÏãúÏßÄ ÎÇ¥Ïö© ÎØ∏Î¶¨Î≥¥Í∏∞
            const bodyPreview = message.body?.substring(0, 100) + (message.body?.length > 100 ? '...' : '');
            console.log('üìÑ Î©îÏãúÏßÄ ÎÇ¥Ïö© ÎØ∏Î¶¨Î≥¥Í∏∞:', bodyPreview);
            
            try {
                const chatMessage: ChatMessageDto = JSON.parse(message.body);
                
                // ÌååÏã±Îêú Î©îÏãúÏßÄ Í≤ÄÏ¶ù
                console.log('‚úÖ Î©îÏãúÏßÄ ÌååÏã± ÏÑ±Í≥µ:', {
                    clubId: chatMessage.clubId,
                    senderEmail: chatMessage.senderEmail,
                    senderUsername: chatMessage.senderUsername,
                    type: chatMessage.type,
                    messageLength: chatMessage.message?.length || 0
                });
                
                // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ï∂îÍ∞Ä
                if (!chatMessage.timestamp) {
                    chatMessage.timestamp = Date.now();
                    console.log('‚è∞ ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ï∂îÍ∞Ä:', chatMessage.timestamp);
                }
                
                this.messageSubject.next(chatMessage);
                console.log('üì® Î©îÏãúÏßÄ Ï†ÑÎã¨ ÏôÑÎ£å');
            } catch (error) {
                console.error('‚ùå Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò:', error);
                console.error('üìÑ ÏõêÎ≥∏ Î©îÏãúÏßÄ:', message.body);
                this.errorSubject.next('Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò');
            }
            console.log('üì® ===== Î©îÏãúÏßÄ ÏàòÏã† Ï≤òÎ¶¨ ÏôÑÎ£å =====');
        });
        
        console.log('‚úÖ Íµ¨ÎèÖ ÏÑ±Í≥µ:', topic);
    } catch (error) {
        console.error('‚ùå Íµ¨ÎèÖ Ïã§Ìå®:', error);
        this.errorSubject.next('Ï±ÑÎÑê Íµ¨ÎèÖ Ïã§Ìå®');
    }
    console.log('üì° ===== ÌÅ¥ÎüΩ Íµ¨ÎèÖ ÏôÑÎ£å =====');
}

// JOIN Î©îÏãúÏßÄ Ï†ÑÏÜ° - Í∞úÏÑ†Îêú ÎîîÎ≤ÑÍπÖ
private sendJoinMessage(clubId: number, userEmail: string, username: string): void {
    console.log('üì§ ===== JOIN Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏãúÏûë =====');
    
    const channelInfo = this.currentChannelName ? ` (#${this.currentChannelName})` : '';
    const groupInfo = this.currentGroupId ? ` in ${this.currentGroupId}` : '';
    
    const joinMessage = {
        clubId: clubId,
        senderEmail: userEmail,
        senderUsername: username,
        message: `${username} joined chat room ${clubId}${channelInfo}${groupInfo}`,
        type: 'JOIN' as const
    };

    console.log('üìã JOIN Î©îÏãúÏßÄ ÎÇ¥Ïö©:', {
        clubId: joinMessage.clubId,
        senderEmail: joinMessage.senderEmail,
        senderUsername: joinMessage.senderUsername,
        messageContent: joinMessage.message,
        type: joinMessage.type,
        destination: '/app/chat.addUser'
    });

    this.sendMessage('/app/chat.addUser', joinMessage);
    console.log('üì§ ===== JOIN Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å =====');
}

  // Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° - Í∞úÏÑ†Îêú ÎîîÎ≤ÑÍπÖ
  sendChatMessage(clubId: number, userEmail: string, username: string, messageContent: string): void {
      console.log('üì§ ===== CHAT Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏãúÏûë =====');
      console.log('üìã Ï†ÑÏÜ° ÏöîÏ≤≠ Ï†ïÎ≥¥:', {
          requestedClubId: clubId,
          currentClubId: this.currentClubId,
          userEmail,
          username,
          messageLength: messageContent?.length || 0
      });
      
      if (clubId !== this.currentClubId) {
          console.warn('‚ö†Ô∏è ÌÅ¥ÎüΩ ID Î∂àÏùºÏπò:', { 
              requestedClubId: clubId, 
              currentClubId: this.currentClubId 
          });
      }
      
      const message = {
          clubId: clubId,
          senderEmail: userEmail,
          senderUsername: username,
          message: messageContent,
          type: 'CHAT' as const
      };

      console.log('üìã CHAT Î©îÏãúÏßÄ ÎÇ¥Ïö©:', {
          clubId: message.clubId,
          senderEmail: message.senderEmail,
          senderUsername: message.senderUsername,
          messagePreview: messageContent.substring(0, 50) + (messageContent.length > 50 ? '...' : ''),
          type: message.type,
          channelName: this.currentChannelName,
          groupId: this.currentGroupId,
          destination: '/app/chat.sendMessage'
      });
      
      this.sendMessage('/app/chat.sendMessage', message);
      console.log('üì§ ===== CHAT Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å =====');
  }

  // STOMP Î©îÏãúÏßÄ Ï†ÑÏÜ° - Í∞úÏÑ†Îêú ÏóêÎü¨ Ï≤òÎ¶¨ Î∞è ÎîîÎ≤ÑÍπÖ
  private sendMessage(destination: string, message: any): void {
      console.log('üì§ ===== STOMP Î©îÏãúÏßÄ Ï†ÑÏÜ° =====');
      console.log('üìã Ï†ÑÏÜ° Ï†ïÎ≥¥:', {
          destination,
          messageType: message.type,
          clubId: message.clubId,
          connected: this.stompClient?.connected || false
      });
      
      if (!this.stompClient?.connected) {
          console.error('‚ùå STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå');
          console.log('üîå Ïó∞Í≤∞ ÏÉÅÌÉú ÎîîÎ≤ÑÍ∑∏:', {
              stompClient: !!this.stompClient,
              connected: this.stompClient?.connected,
              connectionStatus: this.connectionStatus()
          });
          this.errorSubject.next('ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥Ï°åÏäµÎãàÎã§.');
          return;
      }

      try {
          const messageJson = JSON.stringify(message);
          console.log('üìã Ï†ÑÏÜ°Ìï† JSON:', {
              size: messageJson.length,
              preview: messageJson.substring(0, 200) + (messageJson.length > 200 ? '...' : '')
          });
          
          this.stompClient.publish({
              destination: destination,
              body: messageJson
          });
          
          console.log('‚úÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏÑ±Í≥µ');
      } catch (error) {
          console.error('‚ùå Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®:', error);
          console.error('üìã Ïã§Ìå®Ìïú Î©îÏãúÏßÄ:', message);
          this.errorSubject.next('Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®');
      }
      console.log('üì§ ===== STOMP Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å =====');
  }

  // Ï±ÑÌåÖÎ∞© Ìá¥Ïû• - Í∞úÏÑ†Îêú Î°úÏßÅ
  leaveRoom(): void {
    if (this.currentClubId !== -1 && this.stompClient?.connected) {
      const channelInfo = this.currentChannelName ? ` (#${this.currentChannelName})` : '';
      const leaveMessage = {
        clubId: this.currentClubId,
        senderEmail: this.currentUserEmail,
        senderUsername: this.currentUsername,
        message: `${this.currentUsername} left chat room ${this.currentClubId}${channelInfo}`,
        type: 'LEAVE' as const
      };
      
      console.log('üö™ LEAVE Î©îÏãúÏßÄ Ï†ÑÏÜ°:', leaveMessage);
      this.sendMessage('/app/chat.sendMessage', leaveMessage);
    }
    
    // Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî
    console.log('üîÑ Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî');
    this.currentClubId = -1;
    this.currentChannelName = '';
    this.currentGroupId = '';
  }

  // Ïó∞Í≤∞ Ìï¥Ï†ú - Í∞úÏÑ†Îêú Ï†ïÎ¶¨
  disconnect(): void {
    console.log('üîå WebSocket Ïó∞Í≤∞ Ìï¥Ï†ú ÏãúÏûë');
    
    this.leaveRoom();
    
    if (this.stompClient) {
      try {
        this.stompClient.deactivate();
        console.log('‚úÖ STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÎπÑÌôúÏÑ±Ìôî ÏôÑÎ£å');
      } catch (error) {
        console.error('‚ùå STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÎπÑÌôúÏÑ±Ìôî Ïã§Ìå®:', error);
      }
      this.stompClient = null;
    }
    
    this.connectionStatus.set('disconnected');
    console.log('üîå WebSocket Ïó∞Í≤∞ Ìï¥Ï†ú ÏôÑÎ£å');
  }

  // Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏ - Í∞úÏÑ†Îêú Ï≤¥ÌÅ¨
  isConnected(): boolean {
    const connected = this.connectionStatus() === 'connected' && !!this.stompClient?.connected;
    
    if (!connected) {
      console.log('‚ùå Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏:', {
        statusSignal: this.connectionStatus(),
        stompConnected: !!this.stompClient?.connected,
        stompClient: !!this.stompClient
      });
    }
    
    return connected;
  }

  // ÌòÑÏû¨ ÌÅ¥ÎüΩ ID Ï°∞Ìöå
  getCurrentClubId(): number {
    return this.currentClubId;
  }

  getCurrentChannelInfo(): { 
      clubId: number, 
      channelName: string, 
      groupId: string,
      userEmail: string,
      username: string
  } {
      const info = {
          clubId: this.currentClubId,
          channelName: this.currentChannelName,
          groupId: this.currentGroupId,
          userEmail: this.currentUserEmail,
          username: this.currentUsername
      };
      
      console.log('‚ÑπÔ∏è ÌòÑÏû¨ Ï±ÑÎÑê Ï†ïÎ≥¥ Ï°∞Ìöå:', info);
      return info;
  }

  // ÎîîÎ≤ÑÍπÖÏö© Î©îÏÑúÎìú
  debugConnectionState(): void {
    console.log('=== WebSocket Ïó∞Í≤∞ ÏÉÅÌÉú ÎîîÎ≤ÑÍ∑∏ ===');
    console.log('Ïó∞Í≤∞ ÏÉÅÌÉú Ïã†Ìò∏:', this.connectionStatus());
    console.log('STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï°¥Ïû¨:', !!this.stompClient);
    console.log('STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞Îê®:', !!this.stompClient?.connected);
    console.log('ÌòÑÏû¨ ÌÅ¥ÎüΩ ID:', this.currentClubId);
    console.log('ÌòÑÏû¨ Ï±ÑÎÑê Ïù¥Î¶Ñ:', this.currentChannelName);
    console.log('ÌòÑÏû¨ Í∑∏Î£π ID:', this.currentGroupId);
    console.log('ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê:', {
      email: this.currentUserEmail,
      username: this.currentUsername
    });
    console.log('Ïã§Ï†ú Ïó∞Í≤∞ ÏÉÅÌÉú:', this.isConnected());
  }

  // Ïó∞Í≤∞ Í∞ïÏ†ú Ïû¨ÏãúÎèÑ
  forceReconnect(): void {
    console.log('üîÑ Í∞ïÏ†ú Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ');
    this.connectionStatus.set('reconnecting');
    
    this.disconnect();
    
    setTimeout(() => {
      if (this.currentUserEmail && this.currentUsername) {
        this.connect(this.currentUserEmail, this.currentUsername);
      } else {
        console.error('‚ùå Ïû¨Ïó∞Í≤∞ Ïã§Ìå®: ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÜÏùå');
        this.connectionStatus.set('disconnected');
      }
    }, 1000);
  }
}